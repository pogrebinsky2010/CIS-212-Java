import java.awt.BorderLayout;
import java.awt.event.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class Client extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final int PORT = 12345;
	private static String SHUTDOWN = "";

	private JTextArea _textArea;
	private JTextField _textField;
	private ObjectInputStream _inputStream;
	private ObjectOutputStream _outputStream;
	private int count = 0;

	public Client() {
		super("This is the Last something......");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new BorderLayout());

		_textArea = new JTextArea(10, 40);
		_textArea.setEditable(true);
		add(new JScrollPane(_textArea), BorderLayout.CENTER);
		_textField = new JTextField(30);
		_textField.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent ev) {
				String message = _textField.getText();
				if (message.equals(SHUTDOWN)) {
					exitGU();
				}
				_textField.setText("");
			}

		});
		add(_textField, BorderLayout.SOUTH);

		pack();
		setVisible(true);
		System.out.println("Started");
		
		Socket socket = null;

		try {
			System.out.println("Client Started, Connecting.");
			InetAddress localHost = InetAddress.getLocalHost();
			socket = new Socket(localHost, PORT);

			_outputStream = new ObjectOutputStream(socket.getOutputStream());
			_outputStream.flush();

			_inputStream = new ObjectInputStream(socket.getInputStream());

			try {
				while (true) {
					if(count ==0)
					{
						displayMessage("enter a number and press return");
						count++;
					}
					String message = _inputStream.readUTF();
		

					System.out.println("Nom Nom message i recieved");

					displayMessage(message);
					System.out.println(message + "nomflflflflf");

				}
			} catch (IOException ex) {
				ex.printStackTrace();
			} finally {
				// Close streams and sockets regardless of whether or
				// not an exception occurred. Make sure they were
				// initialized first, though!
				if (_inputStream != null) {
					_inputStream.close();
				}
				if (_outputStream != null) {
					_outputStream.close();
				}
				if (socket != null) {
					socket.close();
				}

				System.out.println("Shutdown successful!");
			}
		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}

	
	private void sendMessage(String message)
	{
		try{
			_outputStream.writeUTF(message);
			_outputStream.flush();
			}
		catch (IOException ex)
		{
			ex.printStackTrace();
		}
		
	}
	
	
	
	private void displayMessage(String message) 
	{

			_textArea.append(message + "\n");	

	}

	private void exitGU() {
		// TODO Auto-generated method stub
		this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));

	}

	public static void main(String[] args) {
		new Client();

	}
}